<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/webflow
        http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">

	 <var name = "order" class = "com.egrocery.model.CustomerOrder" /> 
	 
<!-- 	 Use the action-state element when you wish to invoke an action,  -->
<!-- 	 then transition to another state based on the action's outcome -->
<!-- Use the transition element to handle events that occur within a state: -->

	 <action-state id = "addCartToOrder"> 
	 	<evaluate expression = "cartDaoImpl.validate(requestParameters.cartId)" result = "order.cart" /> 
	 	<transition to="invalidCartWarning" on-exception = "java.io.IOException" /> 
	 	<transition to="collectCustomerInfo" /> 
	 </action-state>
	 
<!-- 	 Use the model attribute to declare a model object the view binds to.  -->
<!-- 	 This attribute is typically used in conjunction with views that render data controls, such as forms. -->
<!-- 	 It enables form data binding and validation behaviors to be driven from metadata on your model object. -->
	  
	 <view-state id="collectCustomerInfo" view="collectCustomerInfo.jsp" model="order"> 
	 	<transition on="customerInfoCollected" to="collectShippingDetail" /> 
	 </view-state>

     <view-state id="collectShippingDetail" view="collectShippingDetail.jsp" model="order"> 
	 	<transition on="shippingDetailCollected" to="orderConfirmation" /> 
	 	<transition on="backToCollectCustomerInfo" to="collectCustomerInfo" /> 
	 </view-state>
	 
	  <view-state id="orderConfirmation"> 
	 	<transition on="orderConfirm" to="processOrder" /> 
	 	<transition on="backToCollectShippingDetail" to="collectShippingDetail" /> 
	 </view-state>
	 
	  <action-state id="processOrder"> 
	 	<evaluate expression ="cartItemDaoImpl.removeAllCartItems(order.cart)" /> 
	 	<transition to="thankCustomer" /> 
	 </action-state>
	 
	 <view-state id="thankCustomer" model="order" > 
	 	<transition to="endState" /> 
	 </view-state>
	 
	 <end-state id="endState" /> 
	 
	 <view-state id="invalidCartWarning" > 
	 	<transition to="endState" /> 
	 </view-state>
	 
	 <end-state id="cancelCheckout" view ="checkOutCancelled.jsp" />
	 
<!-- Use the flow's global-transitions element to create transitions that apply across all views.  -->
<!-- Global-transitions are often used to handle global menu links that are part of the layout. -->
	 <global-transitions> 
	 	<transition on="cancel" to="cancelCheckout" />
	 </global-transitions>
    
</flow>